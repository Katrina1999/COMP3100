Stage 2
Katrina David (45308748)	     Sakura Mukhopadhyay (45435073)  	       Trideep Lal Das (45532125)
Group 8 (Thursday 4pm-6pm)
  
Worst-Fit Algorithm - implemented by Sakura Mukhopadhyay
The worst-fit algorithm looks for memory space that is free and has enough storage space for the requested  task. 
The algorithm selects the largest free memory space that is available and that has more memory space than the desired task’s required memory space. 
It then stores the requested information directly into this vacant memory space. By implementing this algorithm, we observe the processor allocates any memory block that is vacant to the ongoing process. 
This leads to an increase in the probability of memory being wasted and hence is called the worst-fit algorithm. 
When the allocated tasks are of medium sized memory space tasks, the worst-fit algorithm is ideal and works efficiently. 
However, they break up the potential of using the largest free memory block for further tasks as these large memory spaces cannot be reallocated and end up being wasted and unused. 
It also causes external fragmentation and other algorithm schemes are usually higher choices in implementing into the distributed system. 

Design	consideration
Sakura implemented the worst-fit algorithm to the client side of the scheduler. 
For Group 8 to implement the algorithms successfully, RESC All had to be integrated into the current Client.java. 
The purpose of RESC All’s is to provide information about each server and return it to the client. 
This is shown and visible in the Server.class side where it is parsed and appended to an ArrayList creating the Algorithm.java class. 
In the program, coreCount is defined as the size of the server based on the type of job task to be processed. 
The algorithm decides which available server the task is to be allocated to depending on its memory, disk and core size required for the requested task to be processed. 
The algorithm compares these values to the memory, disk and core values. 
It forms a calculation producing a value known as the fitness value. 
The fitness value in the worst-case algorithm is the variable that chooses which server will be the ‘worst-fit’ for the requested job to be allocated to. 
In the worst-fit algorithm I have implemented, the fitness value calculation is the difference between the coreCount value defined for the requested job compared to the coreCount value of the available servers. 
The algorithm checks the server array which stores information of the availability of the servers. 
The server availability is continuously updated in the client side through the RESC command. 
After checking each server, the highest fitness value is selected and we can say it has the most suitable worstFit value. 
The requested job is then scheduled to the server completing the requirements for a worstFit algorithm scheme. 
As the highest fitness value is selected in the worstFit algorithm, all the servers that the jobs are scheduled to are large servers can be seen in the output when the worst-fit is implemented. 

References
Castillo, C., Rouskas, G. and Harfoush, K., 2007. Efficient Implementation Of Best-Fit Scheduling For Advance Reservations And Qos In Grids. [online] Rouskas.csc.ncsu.edu. Available at: <https://rouskas.csc.ncsu.edu/Publications/Conferences/EVGM-Castillo-2007.pdf> [Accessed 1 May 2020].
David, K., Mukhopadhyay, S. and Lal Das, T., 2020. COMP3100. [GitHub Repository] https://github.com/Katrina1999/COMP3100.git.
Tutorialspoint.com. 2020. OS Memory Allocation Q & A #2 - Tutorialspoint. [online] Available at: <https://www.tutorialspoint.com/operating_system/os_memory_allocation_qa2.htm> [Accessed 1 May 2020].
