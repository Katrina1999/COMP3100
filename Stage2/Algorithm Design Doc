Stage 2
Katrina David (45308748)	     Sakura Mukhopadhyay (45435073)  	       Trideep Lal Das (45532125)
Group 8 (Thursday 4pm-6pm)

Introduction
Priority Scheduling is the task of scheduling jobs based on a scale of importance. 
This importance is based on the submission time in which a particular job is sent to the scheduler. 
Stage 2 of Group 8’s Priority Job Scheduler for Distributed Systems involves understanding and implementing three simple scheduling algorithms that are based on memory allocation policies.
The three scheduling algorithms implemented in Group 8’s priority scheduler are First-Fit, Best-Fit and Worst-Fit algorithms schemes. 
Stage 2 of this project also includes producing a simulation log generated by the server-side simulator and is based on simulation statistics that are presented to the team members at the end of simulation. 
Group 8’s algorithm design document features the design considerations and preliminaries for data structures used in Group 8’s Priority Scheduler as well as detailed algorithm descriptions for each of the three simple scheduling algorithms; First-Fit, Best-Fit and Worst-Fit Algorithms. 

Design	consideration

Preliminaries

First Fit Algorithm	description  - implemented by Trideep Lal Das 
The First-Fit Algorithm is an algorithm that scans through the computer memory from beginning to the end. 
It finds the first partition of memory large enough to accommodate the job given, then allocates the job to that memory partition. 
After this, there are two conditions we can take a look at; firstly being checking for leftover space which then becomes a separate free space and secondly, when the job size exceeds the biggest free space in terms of memory, it returns an error.

When looking at the FF algorithm, it is key to note that there are a few advantages and disadvantages to implementing this algorithm. 
The most apparent of the advantages is that compared to all other algorithms, FF is the fastest algorithm as it essentially just needs to find the nearest memory and then allocate the job to that partition. 
Although a point of contention for some, the biggest disadvantage to this algorithm is the wastefulness in terms of memory exhibited by this algorithm. 
The algorithm does not account for the size of the job compared to the size of the partition, leaving unused partitions of memory which is generally a rather small amount. As such, memory space is wasted, and jobs would frequently have to wait for another job to be completed to then be allocated to the memory.

  
Best Fit Algorithm	description 
    
Worst Fit Algorithm	description
      
References    
